
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAppAdmin() {
      // This is a placeholder. In a real app, you'd check a 'roles' map or similar.
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Default deny all to secure the database by default.
    match /{document=**} {
      allow read, write: if false;
    }

    // Admins can read/write anything.
    match /{path=**} {
        allow read, write: if isAppAdmin();
    }

    // Public read for user-generated store configurations.
    match /userStores/{storeId} {
        allow read: if true;
        // Only the owner of the store can write to it.
        allow write: if request.auth.uid == resource.data.userId;
    }
    
    // Public read for product customization options.
    match /userProductOptions/{userId}/products/{productId} {
      allow read: if true;
      // Only the owner can write options.
      allow write: if request.auth.uid == userId;
    }
    
    // Public read for product categories.
    match /users/{userId}/productCategories/{categoryId} {
      allow read: if true;
      // Writing to categories is still restricted to the owner below.
    }

    // Let users manage their own data (products, orders, etc.).
    // This also covers write access for the productCategories collection.
    match /users/{userId}/{documents=**} {
      allow read, write: if request.auth.uid == userId;
    }
  }
}
