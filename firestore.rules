rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function hasAdminRole() {
      // Check if the currently authenticated user's document in the 'users' collection has the 'role' field set to 'admin'.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can only read their own profile, but admins can read any profile.
    // Users can create their own profile upon signup, and update their own profile.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || hasAdminRole();
      allow create, update: if request.auth.uid == userId;
    }
    
    // Any subcollections under a user's document are only accessible by that user.
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth.uid == userId;
    }

    // Admins can read all user credentials for support/debug purposes.
    // Users can only manage their own credentials.
    match /userWooCommerceCredentials/{userId} {
       allow read, write, delete: if request.auth.uid == userId;
       allow list: if hasAdminRole(); // Admins can list all credentials
    }
     match /userShopifyCredentials/{userId} {
       allow read, write, delete: if request.auth.uid == userId;
       allow list: if hasAdminRole(); // Admins can list all credentials
    }

    // Admins can read all user stores for platform analytics.
    // Users can only manage their own stores.
    match /userStores/{storeId} {
      allow read: if get(/databases/$(database)/documents/userStores/$(storeId)).data.userId == request.auth.uid || hasAdminRole();
      allow write, delete: if get(/databases/$(database)/documents/userStores/$(storeId)).data.userId == request.auth.uid;
      allow create: if request.auth != null; // Any authenticated user can create a store
    }
    
    // PUBLIC ACCESS RULES
    // These rules allow public, unauthenticated access for storefronts.
    
    // Store configuration is public for storefronts to read.
    match /userStores/{storeId} {
        allow get: if true;
    }
    
    // Product customization options need to be public for the customizer and storefronts.
    // This allows fetching views, pricing, and boundary boxes.
    match /userProductOptions/{userId}/products/{productId} {
      allow get: if true; 
    }

    // The base "native" product information needs to be public for storefronts.
    // This provides the name, description, etc.
    match /users/{userId}/products/{productId} {
        allow get: if true;
    }
     match /userProductOptions/{userId} {
      allow list, get: if true;
    }
  }
}
