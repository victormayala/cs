rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function hasAdminRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for user-specific data
    match /users/{userId}/{document=**} {
      // Users can read/write their own data. Admins can read any user's data.
      allow read: if request.auth.uid == userId || hasAdminRole();
      allow write: if request.auth.uid == userId;
    }

    // Rules for user credentials (both shopify and woocommerce)
    match /userWooCommerceCredentials/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
    match /userShopifyCredentials/{userId} {
       allow read, write: if request.auth.uid == userId;
    }

    // Rules for user product options
    match /userProductOptions/{userId}/products/{productId} {
      // Allow public read for storefronts
      allow read;
      // Allow owner to write their own product options
      allow write: if request.auth.uid == userId;
    }

    // This is for the native products a user creates
    match /users/{userId}/products/{productId} {
      // Allow public read for storefronts
      allow read;
      // Allow owner to write
      allow write: if request.auth.uid == userId;
    }

     // Rules for user-created product categories
    match /users/{userId}/productCategories/{categoryId} {
        allow read, write: if request.auth.uid == userId;
    }

    // Rules for user-generated stores
    match /userStores/{storeId} {
      // Public can read to render the store
      allow read;
      // The user who owns the store config can write to it.
      allow write: if request.auth.uid == resource.data.userId;
    }

    // Rules for orders and customers within a user's scope
    match /users/{userId}/orders/{orderId} {
        // Admins can read all orders
        // Owners can read their own orders (though they'd likely view through admin panel if they are the store owner)
        allow read: if hasAdminRole() || request.auth.uid == userId;
        // Only backend processes should create orders, so writes are locked down.
        allow write: if false; 
    }

     match /users/{userId}/customers/{customerId} {
        // Admins can read all customers
        allow read: if hasAdminRole() || request.auth.uid == userId;
        // Only backend processes should create customers.
        allow write: if false;
    }

    // Collection Group Queries
    match /{path=**}/orders/{orderId} {
      // Admins can list all orders from all users.
      allow list: if hasAdminRole();
    }
  }
}
