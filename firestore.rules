
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user has an 'admin' role
    function hasAdminRole() {
      // Get the user's document from the 'users' collection
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own user profile document.
      allow create: if request.auth != null && request.auth.uid == userId;

      // A user can only read their own document, OR an admin can read any user's document.
      allow read: if request.auth != null && (request.auth.uid == userId || hasAdminRole());
      
      // A user can only update their own document. Admins are NOT allowed to update user docs via this rule.
      allow update: if request.auth != null && request.auth.uid == userId;

      // Deletion of user documents is disallowed for this example.
      allow delete: if false;

      // Admins can read all orders for any user. Users can read their own.
      match /orders/{orderId} {
        allow read: if request.auth != null && (request.auth.uid == userId || hasAdminRole());
        allow create: if request.auth != null; // Typically created via a backend process
        allow update, delete: if false; // Generally orders should be immutable from client
      }

      // Admins can read all customers for any user. Users can read their own.
       match /customers/{customerId} {
        allow read: if request.auth != null && (request.auth.uid == userId || hasAdminRole());
        allow create: if request.auth != null;
        allow update, delete: if false;
      }
      
       // Admins can read all products for any user. Users can manage their own.
       match /products/{productId} {
         allow read: if request.auth != null && (request.auth.uid == userId || hasAdminRole());
         allow create, update, delete: if request.auth != null && request.auth.uid == userId;
      }
      
       match /productCategories/{categoryId} {
         allow read: if request.auth != null && (request.auth.uid == userId || hasAdminRole());
         allow create, update, delete: if request.auth != null && request.auth.uid == userId;
       }
    }

    // Rules for 'userProductOptions' collection
    match /userProductOptions/{userId}/products/{productId} {
      // An authenticated user can manage their own product options.
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // An admin can also read any product options for analytics/support.
      allow get: if request.auth != null && hasAdminRole();
    }
    
    // Rules for user store configurations
    match /userStores/{storeId} {
        // The owner of the store can manage it. An admin can read any store config.
        allow read: if resource.data.userId == request.auth.uid || hasAdminRole();
        allow create, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Collection group query for orders - allows admin to query across all users' orders
    match /{path=**}/orders/{orderId} {
      allow read: if hasAdminRole();
    }

    // Rules for credentials collections
    match /userWooCommerceCredentials/{userId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    match /userShopifyCredentials/{userId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
  }
}
