rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function hasAdminRole() {
      // Check if the user document exists and has the admin role.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for user-specific data
    match /users/{userId} {
      // Admins can read any user profile, users can read their own.
      allow read: if request.auth.uid == userId || hasAdminRole();
      // Users can only write to their own profile.
      allow write: if request.auth.uid == userId;

      // Subcollections for a specific user
      match /products/{productId} {
        allow read: true; // Publicly readable for storefronts
        allow write: if request.auth.uid == userId;
      }

      match /productCategories/{categoryId} {
        allow read, write: if request.auth.uid == userId;
      }
      
      match /orders/{orderId} {
        allow read, write: if request.auth.uid == userId || hasAdminRole();
      }

      match /customers/{customerId} {
        allow read, write: if request.auth.uid == userId || hasAdminRole();
      }
    }

    // Rules for product customization options
    match /userProductOptions/{userId}/products/{productId} {
      allow read: true; // Publicly readable for storefronts
      allow write: if request.auth.uid == userId;
    }

    // Rules for store credentials
    match /userWooCommerceCredentials/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    match /userShopifyCredentials/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Rules for user-generated stores
    match /userStores/{storeId} {
       // Allow public read for storefronts to fetch their config
      allow read: true;
      // Allow write only if the user is the owner of the store document.
      // Use request.resource.data.userId for creates, resource.data.userId for updates.
      allow write: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
      allow delete: if request.auth.uid == resource.data.userId;
    }

    // Admin-only collection group query rule
    match /{path=**}/orders/{orderId} {
      allow list: if hasAdminRole();
    }
  }
}
