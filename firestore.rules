rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default Deny All: Start with a secure baseline
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can only read/write their own data in the 'users' collection
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Allow logged-in users to manage their own subcollections
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for user credentials
    match /userWooCommerceCredentials/{userId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    match /userShopifyCredentials/{userId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for user product customization options
    match /userProductOptions/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for user-generated stores
    match /userStores/{storeId} {
      // Owner can do anything to their store config
      allow write, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // Anyone can read the main store config for display purposes
      allow get: if true;
    }

    // Anyone can read the `approvedFiles` for a store, since they are public assets for the customizer.
    match /userStores/{storeId}/approvedFiles/{fileId} {
      allow read: if true;
      // Only the store owner can add, update, or delete files.
      // This rule checks the userId on the parent store document.
      allow write: if request.auth != null && get(/databases/$(database)/documents/userStores/$(storeId)).data.userId == request.auth.uid;
    }
  }
}
